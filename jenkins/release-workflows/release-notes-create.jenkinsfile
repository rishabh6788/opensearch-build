/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

lib = library(identifier: 'jenkins@main', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/opensearch-project/opensearch-build-libraries.git',
]))

pipeline {
    options {
        timeout(time: 2, unit: 'HOURS')
    }

    agent none

    parameters {
        string(
            name: 'INPUT_MANIFEST',
            description: 'Release version number to fetch input manifest path',
            trim: true
        )
        string(
            name: 'GIT_LOG_DATE',
            description: 'in format yyyy-mm-dd, example 2022-07-26.',
            trim: true
        )
        string(
            name: 'COMPONENTS',
            description: 'Optional: If this field contains one or more component names (e.g. OpenSearch common-utils ...), will build with "--component COMPONENT_NAME_HERE ...", else build everything in the INPUT_MANIFEST.',
            trim: true
        )
    }
    stages {
        stage('Parameters Check') {
            agent { label 'Jenkins-Agent-AL2023-X64-M54xlarge-Docker-Host' }
            steps {
                script {
                    if (params.INPUT_MANIFEST.isEmpty()) {
                        currentBuild.result = 'ABORTED'
                        error('INPUT_MANIFEST parameter cannot be empty!')
                    }
                }
            }
        }
        stage('Generate consolidated release notes') {
            agent { label 'Jenkins-Agent-AL2023-X64-M54xlarge-Docker-Host' }
            steps {
                script {
                    def inputManifestObj = lib.jenkins.InputManifest.new(readYaml(file: "manifests/${params.INPUT_MANIFEST}"))
                    def componentDefaultList = inputManifestObj.getNames()
                    def componentList = params.COMPONENTS ? params.COMPONENTS.trim().split(' ') as List : componentDefaultList
                    println("Component list: ${componentList}")
                    def componentNotes = [:]

                    // Method 1: Use eachWithIndex to capture values properly
                    componentList.eachWithIndex { component, component_index ->
                        def wait_seconds = component_index * 20
                        // Capture the values in local variables for the closure
                        def currentComponent = component
                        def currentIndex = component_index
                        def currentWaitSeconds = wait_seconds

                        componentNotes["Release notes for ${currentComponent}"] = {
                            timeout(time: 4, unit: 'HOURS') {
                                node('Jenkins-Agent-AL2023-X64-M54xlarge-Docker-Host') {
                                    docker.withRegistry('https://public.ecr.aws/') {
                                        docker.image('opensearchstaging/ci-runner:ci-runner-almalinux8-opensearch-build-v1').pull()
                                        docker.image('opensearchstaging/ci-runner:ci-runner-almalinux8-opensearch-build-v1').inside() {
                                            try {
                                                stage("${currentComponent}") {
                                                    sh("echo ${currentComponent} with index ${currentIndex} will sleep ${currentWaitSeconds} seconds to reduce load && sleep ${currentWaitSeconds}")
                                                    def componentObj = inputManifestObj.components[currentComponent]
                                                    println("Component object: ${componentObj.name}, ${componentObj.ref}, ${componentObj.repository}")
                                                }
                                            }
                                            catch (e) {
                                                throw new Exception("Error running workflow for component ${currentComponent}", e)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    parallel componentNotes
                }
            }
        }
    }
    post {
        always {
             node('Jenkins-Agent-AL2023-X64-M54xlarge-Docker-Host') {
                postCleanup()
             }
        }
    }
}
