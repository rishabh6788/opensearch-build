/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

lib = library(identifier: 'jenkins@main', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/opensearch-project/opensearch-build-libraries.git',
]))

pipeline {
    options {
        timeout(time: 2, unit: 'HOURS')
    }
    agent {
        docker {
            label 'Jenkins-Agent-AL2023-X64-M54xlarge-Docker-Host'
            image 'opensearchstaging/ci-runner:ci-runner-almalinux8-opensearch-build-v1'
            registryUrl 'https://public.ecr.aws/'
            alwaysPull true
        }
    }
    parameters {
        string(
            name: 'INPUT_MANIFEST',
            description: 'Release version number to fetch input manifest path',
            trim: true
        )
        string(
            name: 'GIT_LOG_DATE',
            description: 'in format yyyy-mm-dd, example 2022-07-26.',
            trim: true
        )
        string(
            name: 'COMPONENTS',
            description: 'Optional: If this field contains one or more component names (e.g. OpenSearch common-utils ...), will build with "--component COMPONENT_NAME_HERE ...", else build everything in the INPUT_MANIFEST.',
            trim: true
        )
    }
    stages {
        stage('Parameters Check') {
            steps {
                script {
                    if (params.INPUT_MANIFEST.isEmpty()) {
                        currentBuild.result = 'ABORTED'
                        error('INPUT_MANIFEST parameter cannot be empty!')
                    }
                }
            }
        }
        stage('Generate consolidated release notes') {
            steps {
                script {
                    def inputManifestObj = lib.jenkins.InputManifest.new(readYaml(file: "manifests/${INPUT_MANIFEST}"))
                    def componentDefaultList = inputManifestObj.getNames()
                    def componentList = COMPONENTS ? COMPONENTS.trim().split(' ') as List : componentDefaultList
                    println("Component list: ${componentList}")
                    for (component in componentList) {
                        componentObj = inputManifestObj.components[component]
                        println("Component: ${componentObj.name}, Repo: ${componentObj.repository}")
                    }
                }
            }
        }
    }
    post {
        always {
            postCleanup()
        }
    }
}
